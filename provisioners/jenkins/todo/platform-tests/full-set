@Library('aem-opencloud-manager') _

def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString

pipeline {
    agent {
        docker { image params.JENKINS_AGENT_DOCKER_IMAGE }
    }
    environment {
        // PARAMETERS ARE NEEDED FOR IMPORT Package
        // THIS SHOULD BE REPLACED WITH A BETTER WAY OF GETTING THE YEAR TIMESTAMP
        EXPORT_PACKAGE_AUTHOR_TIMESTAMP = "2019"
        EXPORT_PACKAGE_PUBLISH_TIMESTAMP = "2019"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
    }
    parameters {
        string(name: 'AOC_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for AEM Test Suite')
        string(name: 'AOC_CONFIG_PROFILE_AEM_TEST_SUITE', defaultValue: '', description: 'Name of the config profile for AEM Test Suite')
        string(name: 'AOC_STACK_MANAGER_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for AEM Stack Manager')
        string(name: 'AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER', defaultValue: '', description: 'Name of the config profile for the AEM OpenCloud Stack Manager Messenger')
        string(name: 'DEPLOY_PACKAGE_DESCRIPTOR_FILE', defaultValue: 'deploy-artifacts-descriptor.json', description: 'Name of the descriptor file to deploy on the target AEM Stack')
        string(name: 'DEPLOY_PACKAGE_GROUP', defaultValue: 'shinesolutions', description: 'Package group name')
        string(name: 'DEPLOY_PACKAGE_NAME', defaultValue: 'aem-helloworld-content', description: 'Package name')
        string(name: 'DEPLOY_PACKAGE_SOURCE', defaultValue: 'http://central.maven.org/maven2/com/shinesolutions/aem-helloworld-content/0.0.1/aem-helloworld-content-0.0.1.zip', description: 'Package source URL')
        string(name: 'DEPLOY_PACKAGE_VERSION', defaultValue: '0.0.1', description: 'Package version')
        string(name: 'EXPORT_PACKAGE_GROUP', defaultValue: 'shinesolutions', description: 'Package group name')
        string(name: 'EXPORT_PACKAGE_NAME', defaultValue: 'aem-helloworld-content', description: 'Package name')
        string(name: 'EXPORT_PACKAGE_FILTER', defaultValue: "[{'root':'/apps/helloworld','rules':[]},{'root':'/content/helloworld','rules':[{'modifier':'exclude','pattern':'.*.\\d*\\.\\d*\\.(png|jpeg|gif)'}]},{'root':'/etc/designs/helloworld','rules':[]}]", description: "Package Filter e.g. [{'root':'/apps/helloworld','rules':[]},{'root':'/content/helloworld','rules':[{'modifier':'exclude','pattern':'.*.\\d*\\.\\d*\\.(png|jpeg|gif)'}]},{'root':'/etc/designs/helloworld','rules':[]}].")

        string(name: 'STACK_MANAGER_PREFIX', defaultValue: 'DEV-FS-SM-TEST', description: 'AEM OpenCloud Stack Manager prefix.')
        string(name: 'STACK_PREFIX', defaultValue: 'DEV-FS-TEST', description: 'AEM OpenCloud stack prefix.')
        string(name: 'AOC_VERSION_AEM_AWS_STACK_BUILDER', defaultValue: config.library.aem_aws_stack_builder, description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {

                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)

                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare AEM OpenCloud libraries and configuration') {
            steps {


                    JenkinsStagePreStep this

                    AocPrepareLibrary(this, "aem-aws-stack-builder", params.AOC_VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-test-suite", params.AOC_VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.AOC_VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {


                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare library configuration') {
            steps {


                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make config config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Create AEM OpenCloud Stacks') {
            steps {


                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-full-set config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/ stack_prefix=${params.STACK_PREFIX}")
                    // Create AEM OpenCloud Stack Manager
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-stack-manager config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_STACK_MANAGER_CONFIG_PROFILE}/ stack_prefix=${params.STACK_MANAGER_PREFIX}")
                    // Check readiness of created Full-Set
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run Full-Set acceptance test') {
            steps {


                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-full-set config_path=${env.AOC_CONFIG_DIR}/aem-test-suite/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/ stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run Full-Set recovery test') {
            steps {


                    JenkinsStagePreStep this
                    // Run recovery test
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-recovery-full-set config_path=${env.AOC_CONFIG_DIR}/aem-test-suite/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/ stack_prefix=${params.STACK_PREFIX}")
                    // Check readiness
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event unschedule scheduled-jobs jobs') {
            steps {


                    JenkinsStagePreStep this
                    // Unschedule any scheduled snapshot jobs on aem-components author-primary, author-standby & publish.
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-standby")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-offline-compaction-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-offline-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event list-packages') {
            steps {


                    JenkinsStagePreStep this
                    // list all installed packages on author-primary & publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make list-packages stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make list-packages stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event enable/disable crxde') {
            steps {


                    JenkinsStagePreStep this
                    // enable crxde on aem component author-primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make enable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    // disable crxde on aem component author-primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make disable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    // enable crxde on aem component publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make enable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
                    // disable crxde on aem component publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make disable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event flush-dispatcher-cache') {
            steps {


                    JenkinsStagePreStep this
                    // Flush dispatcher cache on aem components author-dispatcher & publish-Dispatcher
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make flush-dispatcher-cache stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-dispatcher")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make flush-dispatcher-cache stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish-dispatcher")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event deploy-artifacts-full-set') {
            steps {


                    JenkinsStagePreStep this
                    // Deploy deployment descriptor file
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifacts-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ descriptor_file=${params.DEPLOY_PACKAGE_DESCRIPTOR_FILE}")
                    // Check full-set readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event deploy-artifact') {
            steps {


                    JenkinsStagePreStep this
                    // Deploy single artifact on aem component author-primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifact stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary aem_id=author source=${params.DEPLOY_PACKAGE_SOURCE} group=${params.DEPLOY_PACKAGE_GROUP} name=${params.DEPLOY_PACKAGE_NAME} version=${params.DEPLOY_PACKAGE_VERSION} replicate=true activate=false force=true")
                    // Check full-set readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    // Deploy single artifact on aem component publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifact stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish aem_id=publish source=${params.DEPLOY_PACKAGE_SOURCE} group=${params.DEPLOY_PACKAGE_GROUP} name=${params.DEPLOY_PACKAGE_NAME} version=${params.DEPLOY_PACKAGE_VERSION} replicate=true activate=false force=true")
                    // Check full-set readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event export-package') {
            steps {


                    JenkinsStagePreStep this
                    // Export package from aem component author-primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make export-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary aem_id=author package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_filter=${params.EXPORT_PACKAGE_FILTER}")
                    // Export package from aem component publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make export-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish aem_id=publish package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_filter=${params.EXPORT_PACKAGE_FILTER}")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event import-package') {
            steps {


                    JenkinsStagePreStep this
                    // Import exprted package to aem component author-primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make import-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary aem_id=author source_stack_prefix=${params.STACK_PREFIX} package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_datestamp=${exportPackageAuthorTimeStamp}")
                    // Check full-set readiness after package import
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    // Import exprted package to aem component publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make import-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish aem_id=publish source_stack_prefix=${params.STACK_PREFIX} package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_datestamp=${exportPackagePublishTimeStamp}")
                    // Check full-set readiness after package import
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event live-snapshot') {
            steps {


                    JenkinsStagePreStep this
                    // take live snapshot from aem-components author-primary, author-standby & publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make live-snapshot stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make live-snapshot stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-standby")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make live-snapshot stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
                    // Check full-set readiness after live-snapshots were taken
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event offline-snapshot') {
            steps {


                    JenkinsStagePreStep this
                    // Trigger offline-snapshot for Full-Set
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make offline-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    // Check full-set readiness after offline-snapshots were taken
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event offline-compaction-snapshot') {
            steps {


                    JenkinsStagePreStep this
                    // Trigger offline-compaction-snapshot for Full-Set
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make offline-compaction-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    // Check full-set readiness after offline-compaction-snapshots were taken
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event schedule scheduled-jobs') {
            steps {


                    JenkinsStagePreStep this
                    // Schedule all snapshot jobs on aem-components author-primary, author-standby & publish.
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-primary")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-standby")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-live-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=publish")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-offline-compaction-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-offline-snapshot-full-set stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event promote-author') {
            steps {


                    JenkinsStagePreStep this
                    // Promote Author-Standby to Author-Primary
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make promote-author stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {

                  JenkinsStagePostStep this
                }
            }
        }
        stage('Delete AEM OpenCloud Stacks') {
            steps {


                    JenkinsStagePreStep this
                    // Delete AEM OpenCloud Full-Set Stack
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make delete-full-set config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/ stack_prefix=${params.STACK_PREFIX}")
                    // Delete AEM OpenCloud Stack Manager
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make delete-stack-manager config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/ stack_prefix=${params.AOC_STACK_MANAGER_CONFIG_PROFILE}")
                    }
                }
                post {
                    always {

                      JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {

            JenkinsPipelinePostStep this
        }
    }
}
