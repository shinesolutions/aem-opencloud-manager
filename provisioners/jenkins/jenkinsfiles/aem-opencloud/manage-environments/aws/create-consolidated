@Library('aem-opencloud-manager') _
def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString
pipeline {
    agent {
        docker { image params.JENKINS_AGENT_DOCKER_IMAGE }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
    }
    parameters {
        string(name: 'PACKAGE_DESCRIPTOR_FILE', defaultValue: 'deploy-artifacts-descriptor.json', description: 'Name of the descriptor file to deploy on the target AEM Stack')
        string(name: 'AOC_CONFIG_PROFILE_AEM_TEST_SUITE', defaultValue: '', description: 'Name of the config profile for AEM Test Suite')
        string(name: 'AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER', defaultValue: '', description: 'Name of the config profile for the AEM OpenCloud Stack Manager Messenger')
        string(name: 'AOC_VERSION_AEM_AWS_STACK_BUILDER', defaultValue: config.library.aem_aws_stack_builder, description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare AEM OpenCloud libraries and configuration') {
            steps {
                    JenkinsStagePreStep this
                    AocPrepareLibrary(this, "aem-aws-stack-builder", params.AOC_VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.AOC_VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-test-suite", params.AOC_VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareConfig(this, params.AOC_CONFIG_ARTIFACT_URL, env.TMPDIR)
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make deps")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare library configuration') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make config config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Create AEM OpenCloud Stack') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-consolidated config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/ stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run acceptance test') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-author-primary stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish-dispatcher stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Deploy deployment-descriptor') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifacts-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ descriptor_file=${params.PACKAGE_DESCRIPTOR_FILE}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Flush dispatcher cache') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make flush-dispatcher-cache stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/ component=author-publish-dispatcher")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Check consolidated readiness') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_STACK_MANAGER_MESSENGER}/")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
    }
}
