@Library('aem-opencloud-manager') _

def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString

pipeline {
    agent {
        docker {
            label params.JENKINS_AGENT_LABEL
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"

    }
    parameters {
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
    }
    stages {
        stage('Initialise pipeline') {
            steps {
                script {
                    if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                        slackSend (color: '#FFFF00', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    }
                }

                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)

                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare libraries') {
            steps {


                    JenkinsStagePreStep this

                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.AOC_VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, params.AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareConfig(this, params.AOC_CONFIG_ARTIFACT_URL, env.TMPDIR)
            }
            post {
                always {

                    JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {


                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make stage")
            }
            post {
                always {

                    JenkinsStagePostStep this
                }
            }
        }
        stage('Trigger AEM Stack Manager event') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make disable-saml stack_prefix=${params.STACK_MANAGER_STACK_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/ component=${params.AEM_COMPONENT} aem_id=${params.AEM_ID} idp_cert_alias=${params.SAML_CERT_IDP_CERT_ALIAS} serial=${params.SAML_CERT_SERIAL} file=${params.SAML_CERT_FILE} idp_url=${params.SAML_IDP_URL} path=${params.SAML_PATH} service_provider_entity_id=${params.SAML_SERVICE_PROVIDER_ENTITY_ID} add_group_memberships=${params.SAML_ADD_GROUP_MEMBERSHIPS} assertion_consumer_service_url=${params.SAML_ASSERTION_CONSUMER_SERVICE_URL} clock_tolerance=${params.SAML_CLOCK_TOLERANCE} create_user=${params.SAML_CREATE_USER} default_groups=${params.SAML_DEFAULT_GROUPS} default_redirect_url=${params.SAML_DEFAULT_REDIRECT_URL} digest_method=${params.SAML_DIGEST_METHOD} group_membership_attribute=${params.SAML_GROUP_MEMBERSHIP_ATTRIBUTE} handle_logout=${params.SAML_HANDLE_LOGOUT} idp_http_redirect=${params.SAML_IDP_HTTP_REDIRECT} key_store_password=${params.SAML_KEY_STORE_PASSWORD} logout_url=${params.SAML_LOGOUT_URL} name_id_format=${params.SAML_NAME_ID_FORMAT} service_ranking=${params.SAML_SERVICE_RANKING} signature_method=${params.SAML_SIGNATURE_METHOD} sp_private_key_alias=${params.SAML_SP_PRIVATE_KEY_ALIAS} synchronize_attributes=${params.SAML_SYNCHRONIZE_ATTRIBUTES} use_encryption=${params.SAML_USE_ENCRYPTION} user_id_attribute=${params.SAML_USER_ID_ATTRIBUTE} user_intermediate_path=${params.SAML_USER_INTERMEDIATE_PATH}")
            }
            post {
                always {

                    JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
        success {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#00FF00', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
        failure {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
    }
}
