@Library('aem-opencloud-manager') _
def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString
pipeline {
    agent {
        docker {
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
        AOC_CONFIG_PROFILE_DIR_AEM_AWS_STACK_BUILDER = "${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/"
        AOC_CONFIG_PROFILE_DIR_AEM_STACK_MANAGER_MESSENGER = "${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/"
        AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE = "${env.AOC_CONFIG_DIR}/aem-test-suite/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/"
    }
    parameters {
        string(name: 'AOC_VERSION_AEM_AWS_STACK_BUILDER', defaultValue: config.library.aem_aws_stack_builder, description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
        string(name: 'SOURCE_AUTHOR_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Author repository')
        string(name: 'SOURCE_PUBLISH_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Publish repository')
        string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', defaultValue: '', description: 'Source Stack Prefix to get source Snapshot IDs from.')    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare AEM OpenCloud libraries and configuration') {
            steps {
                    JenkinsStagePreStep this
                    AocPrepareLibrary(this, "aem-aws-stack-builder", params.AOC_VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.AOC_VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-test-suite", params.AOC_VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareConfig(this, params.AOC_CONFIG_ARTIFACT_URL, env.TMPDIR)
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make deps")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare configuration for Full-Set AEM environment') {
            steps {
                    JenkinsStagePreStep this
                    GenerateOfflineSnapshotConfig(this, params.SOURCE_AUTHOR_SNAPSHOT_ID, params.SOURCE_PUBLISH_SNAPSHOT_ID, params.SOURCE_SNAPSHOT_STACK_PREFIX, env.AOC_CONFIG_PROFILE_DIR_AEM_AWS_STACK_BUILDER)
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make config config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_AWS_STACK_BUILDER}")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Create AEM environment') {
            steps {
                    JenkinsStagePreStep this
                    AocPrepareParamArtifact(this, params.DEPLOYMENT_DESCRIPTOR_URL, env.TMPDIR + '/aem-aws-stack-builder/stage/', 'deploy-artifacts-descriptor.json')
                    AocPrepareParamArtifact(this, params.CUSTOM_STACK_PROVISIONER_ARTIFACT_URL, env.TMPDIR + '/aem-aws-stack-builder/stage/custom/', 'custom-stack-provisioner.tar.gz')
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-full-set config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_AWS_STACK_BUILDER} stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_STACK_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${AOC_CONFIG_PROFILE_DIR_AEM_STACK_MANAGER_MESSENGER}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Deploy applications on AEM environment') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifacts-full-set stack_prefix=${params.STACK_MANAGER_STACK_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${AOC_CONFIG_PROFILE_DIR_AEM_STACK_MANAGER_MESSENGER} descriptor_file=deploy-artifacts-descriptor.json")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Check AEM environment readiness after deployment') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_STACK_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${AOC_CONFIG_PROFILE_DIR_AEM_STACK_MANAGER_MESSENGER}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Check recovery for AEM environment') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-recovery-full-set stack_prefix=${params.STACK_PREFIX} config_path=${AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Check AEM environment readiness after recovery') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-full-set stack_prefix=${params.STACK_MANAGER_STACK_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${AOC_CONFIG_PROFILE_DIR_AEM_STACK_MANAGER_MESSENGER}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Delete AEM environment') {
            steps {
                    JenkinsStagePreStep this

                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make delete-full-set config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_AWS_STACK_BUILDER} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
    }
}
