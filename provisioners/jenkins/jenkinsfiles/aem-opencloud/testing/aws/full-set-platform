@Library('aem-opencloud-manager') _
def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString
def getDate() {
  Date date = new Date()
  return date.format('yyyyMMdd') as String
}
def genId() {
  return UUID.randomUUID().toString().split('-')[-1]
}
def date = getDate()
def id = genId()
pipeline {
    agent {
        docker {
            label params.JENKINS_AGENT_LABEL
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
    }
    parameters {
        string(name: 'AOC_VERSION_AEM_AWS_STACK_BUILDER', defaultValue: config.library.aem_aws_stack_builder, description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
        string(name: 'SOURCE_AUTHOR_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Author repository')
        string(name: 'SOURCE_PUBLISH_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Publish repository')
        string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', defaultValue: '', description: 'Source Stack Prefix to get source Snapshot IDs from.')
        string(name: 'STACK_MANAGER_STACK_PREFIX', defaultValue: 'aoc-sm-' + id, description: 'Stack Manager Stack Prefix to create for the test.')
        string(name: 'STACK_PREFIX', defaultValue: 'aoc-fs-' + id, description: 'AEM Stack Stack Prefix to create for the test.')
    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {
                script {
                    if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                        slackSend (color: '#FFFF00', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    }
                }
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Create AEM Stack Manager environment') {
            steps {
                    build job: "../../../manage-environments/aws/${params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/create-stack-manager/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER', value: params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER),
                      string(name: 'STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX)
                    ]
            }
        }
        stage('Create AEM Full-Set environment') {
            steps {
                    build job: "../../../manage-environments/aws/${params.AOC_AEM_STACK_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/create-full-set/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                      string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      string(name: 'AOC_CONFIG_ARTIFACT_URL', value: params.AOC_CONFIG_ARTIFACT_URL),
                      string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL),
                      string(name: 'AOC_EXPORT_DESCRIPTOR_URL', value: params.AOC_EXPORT_DESCRIPTOR_URL),
                      string(name: 'AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL', value: params.AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL),
                      string(name: 'AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL', value: params.AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL),
                      string(name: 'SOURCE_AUTHOR_SNAPSHOT_ID', value: params.SOURCE_AUTHOR_SNAPSHOT_ID),
                      string(name: 'SOURCE_PUBLISH_SNAPSHOT_ID', value: params.SOURCE_PUBLISH_SNAPSHOT_ID),
                      string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', value: params.SOURCE_SNAPSHOT_STACK_PREFIX)
                    ]
            }
        }
        stage('Run acceptance tests') {
            steps {
                retry(10) {
                    build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/test-acceptance/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                      string(name: 'AEM_ARCHITECTURE', value: 'full-set')
                    ]
                }
            }
        }
        stage('Unschedule live snapshots') {
          failFast true
          parallel {
            stage('Unschedule live snapshot on author-primary') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/unschedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'author-primary')
                        ]
                }
            }
            stage('Unschedule live snapshot on author-standby') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/unschedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'author-standby')
                        ]
                }
            }
            stage('Unschedule live snapshot on publish') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/unschedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'publish')
                        ]
                }
            }
          }
        }
        stage('Unschedule offline snapshots') {
          steps {
            build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/unschedule-offline-snapshot-full-set/",
            parameters: [
              booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
              string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
              string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                  ]
          }
        }
        stage('Unschedule offline compaction snapshot') {
          steps {
            build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/unschedule-offline-compaction-snapshot-full-set/",
            parameters: [
              booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
              string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
              string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
            ]
          }
        }
        stage('list all packages') {
          failFast true
          parallel {
            stage('list all packages of author-primary') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/list-packages/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'author-primary')
                          ]
                }
            }
            stage('list all packages of publish') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/list-packages/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'publish')
                          ]
                }
            }
          }
        }
        stage('Enable CRXDE') {
          failFast true
          parallel {
            stage('Enable CRXDE on author-primary') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/enable-crxde/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'author-primary')
                          ]
                }
            }
            stage('Enable CRXDE on publish') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/enable-crxde/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'publish')
                          ]
                }
            }
          }
        }
        stage('Disable CRXDE') {
          failFast true
          parallel {
            stage('Disable CRXDE on author-primary') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/disable-crxde/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'author-primary')
                          ]
                }
            }
            stage('Disable CRXDE on publish') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/disable-crxde/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'publish')
                          ]
                }
            }
          }
        }
        stage('Flush AEM Dispatcher Cache') {
          failFast true
          parallel {
            stage('Flush AEM Author-Dispatcher cache') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/flush-dispatcher-cache/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'author-dispatcher')
                          ]
                }
            }
            stage('Flush AEM Publish-Dispatcher cache') {
                steps {
                          build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/flush-dispatcher-cache/",
                          parameters: [
                            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                            string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                            string(name: 'AEM_COMPONENT', value: 'publish-dispatcher')
                          ]
                }
            }
          }
        }
        stage('Deploy applications') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/deploy-artifacts-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                        string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL)
                      ]
            }
        }
        stage('Check environment readiness after deployment') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      ]
            }
        }
        stage('Deploy single Artifact') {
          failFast true
          parallel {
            stage('Deploy single Artifact on Author-Primary') {
                steps {
                  // Script ensures backwards compatibility
                  script{
                    if ( params.DEPLOY_PACKAGE_SOURCE[-4..-1] == '.zip' ) {
                      package_source = params.DEPLOY_PACKAGE_SOURCE
                     }
                     else {
                       package_source = params.DEPLOY_PACKAGE_SOURCE + '/' + params.DEPLOY_PACKAGE_NAME + '-' + params.DEPLOY_PACKAGE_VERSION + '.zip'
                     }
                  }
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/deploy-artifact/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'author-primary'),
                    string(name: 'AEM_ID', value: 'author'),
                    string(name: 'PACKAGE_ACTIVATE', value: params.DEPLOY_PACKAGE_ACTIVATE),
                    string(name: 'PACKAGE_FORCE', value: params.DEPLOY_PACKAGE_FORCE),
                    string(name: 'PACKAGE_GROUP', value: params.DEPLOY_PACKAGE_GROUP),
                    string(name: 'PACKAGE_NAME', value: params.DEPLOY_PACKAGE_NAME),
                    string(name: 'PACKAGE_REPLICATE', value: params.DEPLOY_PACKAGE_REPLICATE),
                    string(name: 'PACKAGE_SOURCE', value: package_source),
                    string(name: 'PACKAGE_VERSION', value: params.DEPLOY_PACKAGE_VERSION)
                  ]
                }
            }
            stage('Deploy single Artifact on Publish') {
                steps {
                  // Script ensures backwards compatibility
                  script{
                    if ( params.DEPLOY_PACKAGE_SOURCE[-4..-1] == '.zip' ) {
                      package_source = params.DEPLOY_PACKAGE_SOURCE
                     }
                     else {
                       package_source = params.DEPLOY_PACKAGE_SOURCE + '/' + params.DEPLOY_PACKAGE_NAME + '-' + params.DEPLOY_PACKAGE_VERSION + '.zip'
                     }
                  }
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/deploy-artifact/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'publish'),
                    string(name: 'AEM_ID', value: 'publish'),
                    string(name: 'PACKAGE_ACTIVATE', value: params.DEPLOY_PACKAGE_ACTIVATE),
                    string(name: 'PACKAGE_FORCE', value: params.DEPLOY_PACKAGE_FORCE),
                    string(name: 'PACKAGE_GROUP', value: params.DEPLOY_PACKAGE_GROUP),
                    string(name: 'PACKAGE_NAME', value: params.DEPLOY_PACKAGE_NAME),
                    string(name: 'PACKAGE_REPLICATE', value: params.DEPLOY_PACKAGE_REPLICATE),
                    string(name: 'PACKAGE_SOURCE', value: package_source),
                    string(name: 'PACKAGE_VERSION', value: params.DEPLOY_PACKAGE_VERSION)
                  ]
                }
            }
          }
        }
        stage('Check environment readiness after single artifact deployment') {
          steps {
                    build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                      string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    ]
          }
        }
        stage('Export artifacts') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/export-packages-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                        string(name: 'AOC_EXPORT_DESCRIPTOR_URL', value: params.AOC_EXPORT_DESCRIPTOR_URL)
                      ]
            }
        }
        stage('Import exported Artifact') {
          failFast true
          parallel {
            stage('Import exported Artifact on author-primary') {
                steps {
                  // Script ensures backwards compatibility
                  script{
                    if ( params.IMPORT_PACKAGE_SOURCE_STACK_PREFIX.isEmpty() ) {
                      package_source_stack_prefix = params.STACK_PREFIX
                     }
                     else {
                       package_source_stack_prefix = params.IMPORT_PACKAGE_SOURCE_STACK_PREFIX
                     }
                     if ( params.IMPORT_PACKAGE_DATESTAMP.isEmpty() ) {
                       package_datestamp = date
                      }
                      else {
                        package_datestamp = params.IMPORT_PACKAGE_DATESTAMP
                      }
                  }
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/import-package/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'author-primary'),
                    string(name: 'AEM_ID', value: 'author'),
                    string(name: 'PACKAGE_DATESTAMP', value: package_datestamp),
                    string(name: 'PACKAGE_GROUP', value: params.IMPORT_PACKAGE_GROUP),
                    string(name: 'PACKAGE_NAME', value: params.IMPORT_PACKAGE_NAME),
                    string(name: 'PACKAGE_SOURCE_STACK_PREFIX', value: package_source_stack_prefix)
                  ]
                }
            }
            stage('Import exported Artifact on publish') {
              steps {
                // Script ensures backwards compatibility
                script{
                  if ( params.IMPORT_PACKAGE_SOURCE_STACK_PREFIX.isEmpty() ) {
                    package_source_stack_prefix = params.STACK_PREFIX
                   }
                   else {
                         package_source_stack_prefix = params.IMPORT_PACKAGE_SOURCE_STACK_PREFIX
                       }
                       if ( params.IMPORT_PACKAGE_DATESTAMP.isEmpty() ) {
                         package_datestamp = date
                        }
                        else {
                          package_datestamp = params.IMPORT_PACKAGE_DATESTAMP
                        }
                  }
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/import-package/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'publish'),
                    string(name: 'AEM_ID', value: 'publish'),
                    string(name: 'PACKAGE_DATESTAMP', value: package_datestamp),
                    string(name: 'PACKAGE_GROUP', value: params.IMPORT_PACKAGE_GROUP),
                    string(name: 'PACKAGE_NAME', value: params.IMPORT_PACKAGE_NAME),
                    string(name: 'PACKAGE_SOURCE_STACK_PREFIX', value: package_source_stack_prefix)
                  ]
              }
            }
          }
        }
        stage('Check environment readiness after package import') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      ]
            }
        }
        stage('Run live-snapshot') {
          failFast true
          parallel {
            stage('Run live-snapshot on author-primary') {
                steps {
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/live-snapshot/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'author-primary')
                  ]
                }
            }
            stage('Run live-snapshot on publish') {
                steps {
                  build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/live-snapshot/",
                  parameters: [
                    booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                    string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                    string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                    string(name: 'AEM_COMPONENT', value: 'publish')
                  ]
                }
            }
          }
        }
        stage('Run offline-snapshot') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/offline-snapshot-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Check environment readiness after offline-snapshot') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Run offline-compaction-snapshot') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/offline-compaction-snapshot-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Check environment readiness after offline-compaction-snapshot') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Schedule live snapshots') {
          failFast true
          parallel {
            stage('Schedule live snapshot on author-primary') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/schedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'author-primary')
                        ]
                }
            }
            stage('Schedule live snapshot on author-standby') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/schedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'author-standby')
                        ]
                }
            }
            stage('Schedule live snapshot on publish') {
                steps {
                        build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/schedule-live-snapshot-full-set/",
                        parameters: [
                          booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                          string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                          string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                          string(name: 'AEM_COMPONENT', value: 'publish')
                        ]
                }
            }
          }
        }
        stage('Schedule offline snapshot') {
          steps {
            build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/schedule-offline-snapshot-full-set/",
            parameters: [
              booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
              string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
              string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                  ]
          }
        }
        stage('Schedule offline compaction snapshot') {
          steps {
            build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/schedule-offline-compaction-snapshot-full-set/",
            parameters: [
              booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
              string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
              string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
            ]
          }
        }
        stage('Promote Author Standby to Author primary') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/promote-author/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
    }
    post {
        always {
          build job: "../../../manage-environments/aws/${params.AOC_AEM_STACK_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/delete-full-set/",
          parameters: [
            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX)
          ]
          build job: "../../../manage-environments/aws/${params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/delete-stack-manager/",
          parameters: [
            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
            string(name: 'AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER', value: params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER),
            string(name: 'STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
          ]
          JenkinsPipelinePostStep this
        }
        success {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#00FF00', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
        failure {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
    }
}
