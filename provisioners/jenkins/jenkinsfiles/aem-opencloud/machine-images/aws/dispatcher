@Library('aem-opencloud-manager') _

def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString

pipeline {
    agent {
        docker {
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
    }
    parameters {
        string(name: 'AOC_VERSION_PACKER_AEM', defaultValue: config.library.packer_aem, description: 'Version of packer-aem repo to retrieve')
    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare AEM OpenCloud libraries and configuration') {
            steps {
                    JenkinsStagePreStep this
                    AocPrepareLibrary(this, "packer-aem", params.AOC_VERSION_PACKER_AEM, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareConfig(this, params.AOC_CONFIG_ARTIFACT_URL, env.TMPDIR)
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "packer-aem", "make deps")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare library configuration') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "packer-aem", "make config config_path=${env.AOC_CONFIG_DIR}/packer-aem/${params.AOC_CONFIG_PROFILE_PACKER_AEM}/")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Create machine image') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "packer-aem", "make aws-dispatcher version=${env.BUILD_ID} config_path=${env.AOC_CONFIG_DIR}/packer-aem/${params.AOC_CONFIG_PROFILE_PACKER_AEM}/")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
    }
}
